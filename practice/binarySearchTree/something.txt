Question 1

Tree TreeInsert(Tree t, Item it)
{
  if (t == NULL) 
  {
    return TreeCreate(t, it); 
  } else if (it < t->data) {
    t->left = TreeInsert(t->left, it); 
  } else if (it > t->data) {
    t->right = TreeInsert(t->right, it); 
  }
  return t; 
}

Question 2 
bool TreeSearch(Tree t, Item it, bool result)
{
  1. if the tree doesnt exist then return false
  if (t == NULL) 
  {
    return false; 
  }

  if (it < t->data)
  {
    t->left = TreeSearch(t->left, it); 
    result = false; 
  } else if (it > t->data) {
    t->right = TreeSearch(t->right, it); 
    result = false; 
  } else {
    result = true; 
    return result; 
  }
  return result; 
}

Question 3 
steps:
1. recursively travel the left or right branch to find if the node we want to delete exists
2. if it exists go ahead and delete 
Tree TreeDeleteItem(Tree t, Item it)
{
  if (t != NULL)
  {
    if (it < t->data)
    {
      t->left = TreeDeleteItem(t->left, it); 
    } else if (it > t->data) {
      t->right = TreeDeleteItem(t->right, it); 
    } else {
      Tree current; 
      if (t == NULL)
      {
        current = NULL; 
      } else if (t->left == NULL) {
        current = t->right; 
      } else if (t->right == NULL) {
        current = t->left; 
      } else {
        current = TreeJoin(t->left, t->right); 
      }
      free(t); 
      t = current; 
      }
  } 
}